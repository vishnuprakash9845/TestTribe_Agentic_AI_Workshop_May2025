from __future__ import annotations
import os
from typing import Dict, Any, List
from src.core.utils import http_post_json, http_get_json

TESTRAIL_BASE = os.getenv("TESTRAIL_BASE", "http://localhost:4002")
TESTRAIL_PROJECT_ID = int(os.getenv("TESTRAIL_PROJECT_ID", "1"))
TESTRAIL_SECTION_ID = int(os.getenv("TESTRAIL_SECTION_ID", "1"))

PRIORITY_MAP = {"Critical": 1, "High": 2, "Medium": 3, "Low": 4}


def map_case_to_testrail_payload(case: Dict[str, Any]) -> Dict[str, Any]:
    title = (case.get("title") or "").strip()
    if not title:
        raise ValueError("Test case title is required")
    steps_in = case.get("steps") or []
    if not isinstance(steps_in, list):
        steps_in = [str(steps_in)]
    steps = [{"step": str(s).strip(), "expected": ""}
             for s in steps_in if str(s).strip()]
    priority_id = PRIORITY_MAP.get((case.get("priority") or "").strip(), 3)
    expected_result = case.get("expected") or ""

    return {
        "title": title,
        "template_id": 2,   # “Steps” template
        "type_id": 1,       # Functional
        "priority_id": priority_id,
        "preconditions": "Generated by TestCase Agent",
        "expected_result": expected_result,
        "steps": steps,
    }


def create_case(payload: Dict[str, Any], section_id: int | None = None) -> Dict[str, Any]:
    sid = section_id if section_id is not None else TESTRAIL_SECTION_ID
    url = f"{TESTRAIL_BASE}/api/v2/cases/{sid}"
    return http_post_json(url, payload)


def list_cases(project_id: int | None = None) -> List[Dict[str, Any]]:
    pid = project_id if project_id is not None else TESTRAIL_PROJECT_ID
    url = f"{TESTRAIL_BASE}/api/v2/cases/{pid}"
    data = http_get_json(url)
    assert isinstance(data, list), "Expected list from /cases/{project_id}"
    return data

# Status ID legend (mock): 1=Passed, 2=Blocked, 3=Untested, 4=Retest, 5=Failed


def add_result(
        case_id: int,
        status_id: int = 3,
        comment: str | None = None,
        elapsed: str | None = None) -> dict[str, Any]:
    url = f"{TESTRAIL_BASE}/api/v2/results/{case_id}"
    payload: dict[str, Any] = {"status_id": status_id}
    if comment is not None:
        payload["comment"] = comment
    if elapsed is not None:
        payload["elapsed"] = elapsed
    return http_post_json(url, payload)


def get_stats(project_id: int | None = None) -> dict:
    pid = project_id if project_id is not None else TESTRAIL_PROJECT_ID
    url = f"{TESTRAIL_BASE}/api/v2/stats/{pid}"
    return http_get_json(url)
